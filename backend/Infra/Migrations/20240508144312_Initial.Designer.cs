// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Stairways.Infra.Context;

#nullable disable

namespace Stairways.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240508144312_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Stairways.Core.Models.RoadmapEdgeEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EndItemAnchor")
                        .HasColumnType("integer");

                    b.Property<string>("EndItemId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Format")
                        .HasColumnType("integer");

                    b.Property<string>("RoadmapEntityId")
                        .HasColumnType("text");

                    b.Property<int>("StartItemAnchor")
                        .HasColumnType("integer");

                    b.Property<string>("StartItemId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Style")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EndItemId");

                    b.HasIndex("RoadmapEntityId");

                    b.HasIndex("StartItemId");

                    b.ToTable("Edges", (string)null);
                });

            modelBuilder.Entity("Stairways.Core.Models.RoadmapEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.ComplexProperty<Dictionary<string, object>>("Meta", "Stairways.Core.Models.RoadmapEntity.Meta#RoadmapMeta", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ImageURL")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Privacity")
                                .HasColumnType("integer");

                            b1.Property<string[]>("Tags")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Roadmaps", (string)null);
                });

            modelBuilder.Entity("Stairways.Core.Models.RoadmapItemEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoadmapEntityId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.ComplexProperty<Dictionary<string, object>>("Box", "Stairways.Core.Models.RoadmapItemEntity.Box#ItemBox", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<float>("Height")
                                .HasColumnType("real");

                            b1.Property<float>("Width")
                                .HasColumnType("real");

                            b1.Property<int>("X")
                                .HasColumnType("integer");

                            b1.Property<int>("Y")
                                .HasColumnType("integer");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Content", "Stairways.Core.Models.RoadmapItemEntity.Content#ItemContent", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Info", "Stairways.Core.Models.RoadmapItemEntity.Info#ItemInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Label")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("LabelSize")
                                .HasColumnType("integer");

                            b1.Property<int>("LabelWidth")
                                .HasColumnType("integer");

                            b1.Property<string>("LinkTo")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");
                        });

                    b.HasKey("Id");

                    b.HasIndex("RoadmapEntityId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("Stairways.Core.Models.RoadmapItemLinkEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoadmapItemEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoadmapItemEntityId");

                    b.ToTable("ItemLinks", (string)null);
                });

            modelBuilder.Entity("Stairways.Core.Models.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Stairways.Core.Models.RoadmapEdgeEntity", b =>
                {
                    b.HasOne("Stairways.Core.Models.RoadmapItemEntity", "EndItem")
                        .WithMany("EndEdges")
                        .HasForeignKey("EndItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stairways.Core.Models.RoadmapEntity", null)
                        .WithMany("Edges")
                        .HasForeignKey("RoadmapEntityId");

                    b.HasOne("Stairways.Core.Models.RoadmapItemEntity", "StartItem")
                        .WithMany("StartEdges")
                        .HasForeignKey("StartItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EndItem");

                    b.Navigation("StartItem");
                });

            modelBuilder.Entity("Stairways.Core.Models.RoadmapEntity", b =>
                {
                    b.HasOne("Stairways.Core.Models.UserEntity", "Author")
                        .WithMany("Roadmaps")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Stairways.Core.Models.RoadmapItemEntity", b =>
                {
                    b.HasOne("Stairways.Core.Models.RoadmapEntity", null)
                        .WithMany("Items")
                        .HasForeignKey("RoadmapEntityId");
                });

            modelBuilder.Entity("Stairways.Core.Models.RoadmapItemLinkEntity", b =>
                {
                    b.HasOne("Stairways.Core.Models.RoadmapItemEntity", null)
                        .WithMany("Links")
                        .HasForeignKey("RoadmapItemEntityId");
                });

            modelBuilder.Entity("Stairways.Core.Models.RoadmapEntity", b =>
                {
                    b.Navigation("Edges");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Stairways.Core.Models.RoadmapItemEntity", b =>
                {
                    b.Navigation("EndEdges");

                    b.Navigation("Links");

                    b.Navigation("StartEdges");
                });

            modelBuilder.Entity("Stairways.Core.Models.UserEntity", b =>
                {
                    b.Navigation("Roadmaps");
                });
#pragma warning restore 612, 618
        }
    }
}
